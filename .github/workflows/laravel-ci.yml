name: Laravel CI/CD Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel_test
          MYSQL_USER: laravel
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo_mysql, mbstring, bcmath, gd, intl, curl, zip
          coverage: none

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './laravel-jenkins-app/src/package.json'

      - name: Verify Laravel project structure
        run: |
          echo "📂 Project structure verification..."
          if [ -d "./laravel-jenkins-app/src" ]; then
            echo "✅ Laravel directory exists"
            ls -la ./laravel-jenkins-app/src/
          else
            echo "❌ Laravel directory not found"
            echo "📁 Creating Laravel project structure..."
            mkdir -p ./laravel-jenkins-app/src
            cd ./laravel-jenkins-app/src
            # This would typically be done in the Docker container
            echo "⚠️  Laravel source files should be present"
          fi

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ./laravel-jenkins-app/src/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        if: hashFiles('./laravel-jenkins-app/src/composer.json') != ''
        run: |
          cd ./laravel-jenkins-app/src
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-progress
        env:
          COMPOSER_NO_INTERACTION: 1

      - name: Create Laravel environment file
        if: hashFiles('./laravel-jenkins-app/src/composer.json') != ''
        run: |
          cd ./laravel-jenkins-app/src
          cp .env.example .env || echo "APP_ENV=testing" > .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=laravel_test" >> .env
          echo "DB_USERNAME=laravel" >> .env
          echo "DB_PASSWORD=password" >> .env

      - name: Generate application key
        if: hashFiles('./laravel-jenkins-app/src/composer.json') != ''
        run: |
          cd ./laravel-jenkins-app/src
          php artisan key:generate

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ./laravel-jenkins-app/src/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install NPM dependencies
        if: hashFiles('./laravel-jenkins-app/src/package.json') != ''
        run: |
          cd ./laravel-jenkins-app/src
          npm ci --prefer-offline --no-audit

      - name: Build assets
        if: hashFiles('./laravel-jenkins-app/src/package.json') != ''
        run: |
          cd ./laravel-jenkins-app/src
          npm run build

      - name: Run database migrations
        if: hashFiles('./laravel-jenkins-app/src/composer.json') != ''
        run: |
          cd ./laravel-jenkins-app/src
          php artisan migrate --force

      - name: Run PHPUnit tests
        if: hashFiles('./laravel-jenkins-app/src/composer.json') != ''
        run: |
          cd ./laravel-jenkins-app/src
          ./vendor/bin/phpunit

      - name: Test application health
        if: hashFiles('./laravel-jenkins-app/src/composer.json') != ''
        run: |
          cd ./laravel-jenkins-app/src
          php artisan serve --host=127.0.0.1 --port=8000 &
          sleep 5
          curl -f http://127.0.0.1:8000 || echo "App not responding, but build completed"

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build
        run: |
          cd laravel-jenkins-app
          docker build -t laravel-test:latest .

      - name: Test Docker compose
        run: |
          cd laravel-jenkins-app
          # Remove image reference to force build
          sed -i 's|image: rofiq02bae/laravel-vite-app:latest|# image: rofiq02bae/laravel-vite-app:latest|g' docker-compose.yml
          sed -i 's|# build:|build:|g' docker-compose.yml
          sed -i 's|# context: .|context: .|g' docker-compose.yml
          sed -i 's|# dockerfile: Dockerfile|dockerfile: Dockerfile|g' docker-compose.yml
          
          # Start services
          docker-compose up -d
          
          # Wait for services
          sleep 30
          
          # Check services
          docker-compose ps
          
          # Test health
          docker-compose exec -T app php --version || echo "PHP check failed"
          
          # Cleanup
          docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './laravel-jenkins-app'
          format: 'table'

      - name: Build test image for security scan
        run: |
          cd laravel-jenkins-app
          docker build -t security-test:latest .

      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-test:latest'
          format: 'table'
