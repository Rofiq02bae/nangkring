pipeline {
    agent any
    
    environment {
        APP_DIR = 'laravel-jenkins-app/src'
        COMPOSE_FILE = 'laravel-jenkins-app/docker-compose.yml'
        DOCKER_IMAGE = 'rofiq02bae/laravel-vite-app:latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout code from GitHub repository
                    checkout scm
                }
            }
        }
        
        stage('Dependencies') {
            parallel {
                stage('Composer Install') {
                    agent {
                        docker { 
                            image 'composer:2'
                            args '-v /var/run/docker.sock:/var/run/docker.sock'
                        }
                    }
                    steps {
                        dir("${APP_DIR}") {
                            sh 'composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev'
                        }
                    }
                }
                stage('NPM Install & Build') {
                    agent {
                        docker { 
                            image 'node:20-alpine'
                            args '-v /var/run/docker.sock:/var/run/docker.sock'
                        }
                    }
                    steps {
                        dir("${APP_DIR}") {
                            script {
                                // Check if package-lock.json exists
                                if (fileExists('package-lock.json')) {
                                    sh 'npm ci --omit=dev'
                                } else {
                                    sh 'npm install --omit=dev'
                                }
                                sh 'npm run build'
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    try {
                        echo "üöÄ Starting deployment..."
                        
                        // Pull latest image from Docker Hub
                        sh "docker pull ${DOCKER_IMAGE}"
                        
                        // Stop existing containers
                        sh "docker compose -f ${COMPOSE_FILE} down || true"
                        
                        // Start database first
                        sh "docker compose -f ${COMPOSE_FILE} up -d db"
                        
                        // Wait for database to be ready
                        sh 'sleep 15'
                        
                        // Start application
                        sh "docker compose -f ${COMPOSE_FILE} up -d app"
                        
                        // Wait for app to be ready
                        sh 'sleep 10'
                        
                        // Run migrations
                        sh "docker compose -f ${COMPOSE_FILE} exec -T app php artisan migrate --force || echo 'Migration failed, continuing...'"
                        
                        // Start remaining services
                        sh "docker compose -f ${COMPOSE_FILE} up -d"
                        
                        // Health check
                        sh 'sleep 10'
                        sh '''
                            for i in {1..5}; do
                                if curl -f http://localhost:8000; then
                                    echo "‚úÖ Health check passed"
                                    exit 0
                                fi
                                echo "‚è≥ Waiting for app to be ready... (attempt $i/5)"
                                sleep 5
                            done
                            echo "‚ö†Ô∏è Health check failed, but deployment completed"
                        '''
                        
                        echo "‚úÖ Deployment successful with image: ${DOCKER_IMAGE}"
                        
                    } catch (Exception e) {
                        echo "‚ùå Deployment failed: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully! Laravel app deployed.'
            sh "docker compose -f ${COMPOSE_FILE} ps"
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs for details.'
            sh "docker compose -f ${COMPOSE_FILE} logs app || true"
            sh "docker compose -f ${COMPOSE_FILE} down || true"
        }
        always {
            echo 'üßπ Cleaning up...'
            // Clean up dangling images
            sh 'docker image prune -f || true'
            cleanWs()
        }
    }
}
